var cov_1iru6rvyoo=function(){var path="E:\\Questionner\\server\\controllers\\meetup.js",hash="b01600c00a4624c2395359b2c55f273dc9ed8d63",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"E:\\Questionner\\server\\controllers\\meetup.js",statementMap:{"0":{start:{line:1,column:11},end:{line:1,column:24}},"1":{start:{line:2,column:12},end:{line:2,column:26}},"2":{start:{line:3,column:18},end:{line:3,column:48}},"3":{start:{line:5,column:13},end:{line:5,column:42}},"4":{start:{line:8,column:14},end:{line:8,column:35}},"5":{start:{line:19,column:19},end:{line:44,column:5}},"6":{start:{line:46,column:4},end:{line:46,column:41}},"7":{start:{line:66,column:8},end:{line:66,column:25}},"8":{start:{line:159,column:0},end:{line:159,column:24}}},fnMap:{"0":{name:"validateMeetup",decl:{start:{line:18,column:9},end:{line:18,column:23}},loc:{start:{line:18,column:33},end:{line:47,column:1}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:31},end:{line:67,column:5}},line:51}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const pg=(cov_1iru6rvyoo.s[0]++,require('pg'));const joi=(cov_1iru6rvyoo.s[1]++,require('joi'));const Extension=(cov_1iru6rvyoo.s[2]++,require('joi-date-extensions'));// const dotenv = require('dotenv');
const pool=(cov_1iru6rvyoo.s[3]++,require('../config/database'));// dotenv.config();
const Exjoi=(cov_1iru6rvyoo.s[4]++,joi.extend(Extension));/*const config = {
    user: 'Superuser',
    database: 'endpointDB',
    password: 'olivialive',
    port: 5432,
    max: 100,
    idleTimeoutMillis: 30000,
}; */function validateMeetup(records){cov_1iru6rvyoo.f[0]++;const schema=(cov_1iru6rvyoo.s[5]++,{createdOn:Exjoi.date().format('YYYY-MM-DD'),location:joi.string().allow('').trim().strict().min(2).required(),image:joi.string().min(2).allow('').trim().strict().required(),topic:joi.string().min(2).allow('').trim().strict().required(),happeningOn:Exjoi.date().format('YYYY-MM-DD'),tags:joi.string().min(2)});cov_1iru6rvyoo.s[6]++;return joi.validate(records,schema);}// const pool = new pg.Pool(config);
class meetup{static allmeetup(req,res){cov_1iru6rvyoo.f[1]++;cov_1iru6rvyoo.s[7]++;/* pool.connect((err, client, done) => {
            if (err) {
                console.log(`not able to get connection ${err}`);
                res.status(400).send(err);
            }
            client.query('SELECT * from meetUps', (err, result) => {
                done();
                if (err) {
                    console.log(err);
                    res.status(400).send(err);
                }
                res.status(200).send(result.rows);
            });
        });*/res.json('some');}/* static registerM(req, res) {
        if (!isNaN(req.body.happeningOn)) {
            return res.status(400).send({
                status: 400,
                error: 'Invalid Date',
            });
        }
        const { error } = validateMeetup(req.body);
        if (error) {
            return res.status(400).send({
                status: 400,
                error: error.details[0].message,
            });
        }
        if (!error) {
            const newMeetup = {
                id: meetUps.length + 1,
                createdOn: req.body.createdOn,
                topic: req.body.topic,
                location: req.body.location,
                happeningOn: req.body.happenningOn,
                Tags: req.body.body,
            };

            meetUps.push(newMeetup);
            return res.status(200).json({ status: 200, data: newMeetup });
        }
    }

    static allmeetup(req, res) {
        res.status(200).json({
            status: 200,
            data: meetUps,
        });
    }

    static meetupId(req, res) {
        const meetupId = meetUps.find(c => c.id === parseInt(req.params.id));
        if (!meetup) {
            res.status(404).json({
                status: 404,
                error: 'the user with the given ID was not found',
            });
        } else {
            res.status(200).json({
                status: 200,
                data: meetupId,
            });
        }
    }

    static updateMeetup(req, res) {
        const { error } = validateMeetup(req.body);
        const id = parseInt(req.params.id);
        const some = meetUps.find(c => c.id === parseInt(req.params.id));
        if (!some) {
            return res.status(404).json({ error: 'sorry question not found.' });
        }
        if (error) {
            return res.status(400).send({
                status: 400,
                error: error.details[0].message,
            });
        }
        if (!error) {
            const updateMeetup = {
                id: meetUps.length + 1,
                createdOn: req.body.createdOn,
                topic: req.body.topic,
                location: req.body.location,
                happeningOn: req.body.happeningOn,
                Tags: req.body.body,
            };
            const meetupId = meetUps.indexOf(some);
            const newMeetup = (meetUps[meetupId] = updateMeetup);
            return res.json({ status: 200, data: [newMeetup] });
        }
    }

    static deleteMeetup(req, res) {
        const id = parseInt(req.params.id);
        const some = meetUps.find(c => c.id === id);
        if (!some) {
            return res.status(404).json({ error: 'sorry question not found.' });
        }
        const del = meetUps.indexOf(some);
        meetUps.splice(del, 1);
        return res.json({ success: 'meetup removed successfully.' });
    } */}cov_1iru6rvyoo.s[8]++;module.exports=meetup;