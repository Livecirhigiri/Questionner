const joi = require('joi');
const Extension = require('joi-date-extensions');

const pool = require('../config/database');

function validateQuestion(records) {
    const schema = {
        user: joi
            .string()
            .allow('')
            .trim()
            .strict()
            .min(2)
            .required(),
        meetup: joi.number().max(5),
        tittle: joi
            .string()
            .allow('')
            .trim()
            .strict()
            .min(2)
            .required(),
        body: joi
            .string()
            .min(2)
            .allow('')
            .trim()
            .strict()
            .required(),
    };

    return joi.validate(records, schema);
}

module.exports = {
    allquestion(req, res) {
        pool.query('SELECT * FROM question', (err, result) => {
            if (err) {
                console.log(err);
            }
            return res.json({ data: result.rows });
        });
    },
    create: (req, res) => {
        const { error } = validateQuestion(req.body);
        if (error)
      return res.status(400).send({
        status: 400,
        error: error.details[0].message
      });
    if (!error) {
        const newQ = {
            title: req.body.title,
            body: req.body.body,
            user: req.body.user,
            meetup: req.body.meetup,
        };
        pool.query(
            'INSERT into question(createdby,meetup,tittle,body) VALUES($1,$2,$3,$4) RETURNING*',
            [newQ.user, newQ.meetup, newQ.title, newQ.body],
            (error, result) => {
                if (error) {
                    console.error(error);
                }
                return res.status(201).json({
                    success: 'Question created successfully',
                    data: result.rows,
                });
            });
    },
    updateQuestion: (req, res) => {
        const id = req.params.id;
        const newQ = {
            title: req.body.title,
            body: req.body.body,
        };
        pool.query('SELECT * FROM question WHERE id=$1', [id], (error, result) => {
            if (error) {
                return res.status(500).json(error);
            }
            if (result.rows.length === 0) {
                return res.status(404).json({ error: 'question not found.' });
            }
            // update question
            pool.query(
                'UPDATE question SET tittle=$1,body=$2 WHERE id=$3 RETURNING*',
                [newQ.title, newQ.body, id],
                (errors, data) => {
                    if (errors) {
                        return res.status(500).json(errors);
                    }
                    return res
                        .status(200)
                        .json({ success: 'updated successfully', data: data.rows });
                },
            );
        });
    },
};

// module.exports = question;
